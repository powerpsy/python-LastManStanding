#!/usr/bin/env python3
"""
Test d'int√©gration des transitions dans le jeu principal
=======================================================
Ce script teste rapidement les transitions int√©gr√©es dans le jeu.
"""

import pygame
import sys
import os

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import Config
from game import Game

def test_transitions():
    """Teste les transitions int√©gr√©es dans le jeu"""
    pygame.init()
    
    # Configuration
    config = Config()
    config.WINDOW_WIDTH = 1280
    config.WINDOW_HEIGHT = 720
    
    screen = pygame.display.set_mode((config.WINDOW_WIDTH, config.WINDOW_HEIGHT))
    pygame.display.set_caption("Test Transitions Int√©gr√©es")
    
    # Cr√©er une instance du jeu
    game = Game(config)
    
    # Variables de test
    clock = pygame.time.Clock()
    running = True
    test_phase = 0
    last_test_time = pygame.time.get_ticks()
    
    print("üéÆ Test des transitions int√©gr√©es dans le jeu")
    print("Phase 0: Jeu normal - Appuyez sur TAB pour voir transition comp√©tences")
    
    while running:
        current_time = pygame.time.get_ticks()
        
        # Gestion des √©v√©nements
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    running = False
                elif event.key == pygame.K_SPACE:
                    # Test: Forcer une mont√©e de niveau pour tester la transition d'upgrade
                    if not game.show_upgrade_screen and not game.paused_skills:
                        print("üîÑ Test: D√©clenchement transition vers √©cran d'upgrade")
                        game.trigger_upgrade_screen()
                elif event.key == pygame.K_TAB:
                    # Test: √âcran des comp√©tences
                    if not game.show_upgrade_screen and not game.paused_skills:
                        print("üîÑ Test: D√©clenchement transition vers √©cran comp√©tences")
                        game.transition_to_skills_screen()
                elif event.key == pygame.K_g:
                    # Test: Game over
                    if not game.game_over:
                        print("üîÑ Test: D√©clenchement transition game over")
                        game.transition_to_game_over()
        
        # Permettre au jeu de traiter ses propres √©v√©nements aussi
        game.handle_events()
        
        # Mise √† jour
        game.update()
        
        # Affichage
        game.draw()
        
        # Tests automatiques
        if current_time - last_test_time > 5000:  # Toutes les 5 secondes
            if test_phase == 0 and not game.transition_manager.is_active:
                print("Phase 1: Test transition √©cran comp√©tences automatique...")
                game.transition_to_skills_screen()
                test_phase = 1
            elif test_phase == 1 and not game.transition_manager.is_active and game.paused_skills:
                print("Phase 2: Retour du test √©cran comp√©tences...")
                game.transition_from_skills_screen()
                test_phase = 2
            elif test_phase == 2 and not game.transition_manager.is_active:
                print("Phase 3: Test transition √©cran upgrade automatique...")
                game.trigger_upgrade_screen()
                test_phase = 3
            
            last_test_time = current_time
        
        clock.tick(60)
    
    pygame.quit()
    print("‚úÖ Test termin√©")

if __name__ == "__main__":
    print("Instructions de test:")
    print("- ESPACE: D√©clencher transition vers √©cran d'upgrade")
    print("- TAB: D√©clencher transition vers √©cran comp√©tences")
    print("- G: D√©clencher transition game over")
    print("- ESC: Quitter")
    print("- Tests automatiques toutes les 5 secondes")
    print()
    
    test_transitions()
